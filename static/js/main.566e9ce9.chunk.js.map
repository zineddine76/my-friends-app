{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","friends.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","friends","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","console","log","filter","friend","toLowerCase","includes","state","fetch","then","response","json","users","filterfriends","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4LAeeA,G,MAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAe,EAARC,GAC3B,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BL,EAA1B,cACvB,6BACA,4BAAKA,GACL,2BAAIC,O,4BCkBQK,EAtBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACF,6BAGEA,EAAQC,KAAI,SAACC,EAAMC,GAClB,OACD,kBAAC,EAAD,CACGC,IAAKJ,EAAQG,GAAGR,GAChBA,GAAIK,EAAQG,GAAGR,GACfF,KAAMO,EAAQG,GAAGV,KACjBC,MAAOM,EAAQG,GAAGT,aCATW,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAU,OACf,2BACAA,UAAU,mCACVY,KAAK,SAASC,YAAY,iBAC1BC,SAAUH,MCTCP,EAAU,CACvB,CACCL,GAAG,EACHF,KAAK,kBACLkB,SAAS,SACTjB,MAAM,oBAGP,CACCC,GAAG,EACHF,KAAK,oBACLkB,SAAS,YACTjB,MAAM,uBAGP,CACCC,GAAG,EACHF,KAAK,iBACLkB,SAAS,SACTjB,MAAM,oBAGP,CACCC,GAAG,EACHF,KAAK,gBACLkB,SAAS,QACTjB,MAAM,mBAGP,CACCC,GAAG,EACHF,KAAK,gBACLkB,SAAS,QACTjB,MAAM,mBAGP,CACCC,GAAG,EACHF,KAAK,eACLkB,SAAS,OACTjB,MAAM,mBC5BQkB,EAVA,SAACC,GAEhB,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WC8DMC,G,wDAvDd,aAAe,IAAD,8BACb,gBAeDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAChB,YAAae,EAAME,OAAOC,QAAQ,WACjDC,QAAQC,IAAI1B,EAAQ2B,QAAO,SAAAC,GAAM,OAAIA,EAAOnC,KAAKoC,cAAcC,SAAS,EAAKC,MAAMzB,YAAYuB,uBAhB/F,EAAKE,MAAQ,CACZ/B,QAAS,GACTM,YAAa,IAJD,E,gEAQO,IAAD,OAEpB0B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKd,SAAS,CAAEtB,QAASoC,S,+BAe9B,IAAD,OAEEC,EAAgBC,KAAKP,MAAM/B,QAAQ2B,QAAO,SAAAC,GACpD,OAAOA,EAAOnC,KAAKoC,cAAcC,SAAS,EAAKC,MAAMzB,YAAYuB,kBAG7D,OAAiC,IAA7BS,KAAKP,MAAM/B,QAAQuC,OACf,yCAKL,yBAAK3C,UAAU,MACrB,8CACA,kBAAC,EAAD,CAAWW,aAAc+B,KAAKlB,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,QAASqC,U,GA5CLG,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACR,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.566e9ce9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='Zino Mino' src={`https://robohash.org/${name}?100x100`}/>\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ friends }) => {\r\n   return (\r\n\t<div>\r\n\t{\r\n\r\n\t  friends.map((user, i) => {\r\n\t\t  return (\r\n\t\t\t<Card \r\n\t\t\t   key={friends[i].id} \r\n\t\t\t   id={friends[i].id} \r\n\t\t\t   name={friends[i].name} \r\n\t\t\t   email={friends[i].email}\r\n\t\t\t/>\r\n\t\t  ); \r\n\t  }) \r\n\t}\r\n\r\n\t</div>\r\n );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>    \r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' placeholder='search friends'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","export const friends = [\r\n{\r\n\tid:1,\r\n\tname:'hakima benterki',\r\n\tusername:'hakima',\r\n\temail:'hakima@email.com'\r\n},\r\n\r\n{\r\n\tid:2,\r\n\tname:'zineddine haroune',\r\n\tusername:'zineddine',\r\n\temail:'zineddine@email.com'\r\n},\r\n\r\n{\r\n\tid:3,\r\n\tname:'wassim haroune',\r\n\tusername:'wassim',\r\n\temail:'wassim@email.com'\r\n},\r\n\r\n{\r\n\tid:4,\r\n\tname:'rafik haroune',\r\n\tusername:'rafik',\r\n\temail:'rafik@email.com'\r\n},\r\n\r\n{\r\n\tid:5,\r\n\tname:'maria haroune',\r\n\tusername:'maria',\r\n\temail:'maria@email.com'\r\n},\r\n\r\n{\r\n\tid:6,\r\n\tname:'ryma haroune',\r\n\tusername:'ryma',\r\n\temail:'ryma@email.com'\r\n}\r\n\r\n]","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\nreturn(\r\n\t<div style={{overflowY:'scroll', border: '1px solid black', height: '600px' }}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { friends } from './friends';\r\nimport Scroll from './Scroll';\r\nimport './App.css'\r\n\r\nconst state = {\r\n\tfriends: friends,\r\n\tsearchfield: ''\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tfriends: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users => {this.setState({ friends: users })});\r\n\t\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value}, () => {\t\t\r\n\t\tconsole.log(friends.filter(friend => friend.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))); \r\n\t\t}\r\n\r\n\t\t);\r\n\r\n\t\t\r\n\r\n\t}\r\n\r\n\trender () {\r\n       \r\n       const filterfriends = this.state.friends.filter(friend => {\r\n\t\t\treturn friend.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\r\n       if (this.state.friends.length ===0){\r\n       \treturn <h1> Loading </h1>\r\n       \t}\r\n       \telse {\r\n       \t\treturn(\r\n       \t\r\n          <div className='tc'>\r\n\t\t  <h1> Zino Friends </h1>\r\n\t\t  <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t  <Scroll>\r\n\t\t  <CardList friends={filterfriends}/>\r\n\t\t  </Scroll>\r\n\t\t  </div>\r\n\t\t\r\n\r\n\t\t)\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}